theme = "catppuccin_macchiato"
# theme = "gruvbox_dark_hard"

[editor]
rulers = [80, 100]
cursorline = true
color-modes = true
true-color = true
# rainbow-brackets = true # Disabled since it currently requires building from source.
line-number = "relative"
# shell = ["powershell", "-NoProfile", "-Command"]
shell = ["nu", "-c"]
jump-label-alphabet = "smtneriacgwlypfouqjvdhbxkz"

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.statusline]
left = ["mode", "spinner", "read-only-indicator", "file-modification-indicator"]
center = ["file-name",]
right = ["diagnostics", "selections", "position", "file-encoding", "file-type"]
separator = "│"
mode.normal = "NORMAL"
mode.insert = "INSERT"
mode.select = "SELECT"

[editor.indent-guides]
render = true
character = "⸽"
# skip-levels = 1

[editor.soft-wrap]
enable = true

[editor.inline-diagnostics]
other-lines = "disable"
cursor-line = "hint"

[keys.normal]
# Quick iteration on config changes.
C-o = ":config-open"
C-r = ":config-reload"

# Movement keymaps.
H = "move_prev_sub_word_start"
L = "move_next_sub_word_start"
"{" = ["goto_prev_paragraph", "collapse_selection"]
"}" = ["goto_next_paragraph", "collapse_selection"]

# Escape madness easily.
esc = ["collapse_selection", "keep_primary_selection"]

# Allows adding newlines easier.
o = ["open_below", "normal_mode"]
O = ["open_above", "normal_mode"]

# Moving things to next line;
# useful for semantic linefeeds.
q = ["move_prev_word_start", "insert_newline"]
Q = ["move_prev_long_word_start", "insert_newline"]

# Remapping macros to facilitate the above
# since I very, very rarely use macros.
C-q = "record_macro"
A-q = "replay_macro"

# Helix should have this by default
X = "select_line_above"

# Allow moving lines up and down
"A-j" = ["extend_to_line_bounds", "delete_selection", "paste_after"]
"A-k" = [
  "extend_to_line_bounds",
  "delete_selection",
  "move_line_up",
  "paste_before",
]

# More ergonomic than <gw>,
# especially in my Night keyboard layout.
ret = "goto_word"

# Currently disabled bc it breaks in Windows + Nushell
# C-y = [
#   ':sh del C:\temp\unique-file',
#   ':insert-output yazi.exe %{buffer_name} --chooser-file=C:\temp\unique-file',
#   ':open %sh{type C:\temp\unique-file}',
#   ":redraw",
# ]

# Commands designed to work with my `zettel-cli` program
[keys.normal."space".z]
# Generate sibling note (no open)
s = ":sh zettel id parse %{buffer_name} | zettel id next-sibling | zettel note create"
# Generate child note (no open)
c = ":sh zettel id parse %{buffer_name} | zettel id next-child | zettel note create"
# Search vault for selection and print results into buffer
f = ":append-output zettel search %{selection}"

# Match in next instance of pair
[keys.normal.m.n]
"(" = "@s\\(<ret>nmim"
"{" = "@s\\{<ret>nmim"
"[" = "@s\\[<ret>nmim"
'"' = '@s\"<ret>nmim'
"'" = "@s\\'<ret>nmim"
"<" = "@s<lt><ret>nmim"

# Match in previous instance of pair
[keys.normal.m.p]
"(" = "@s\\)<ret>Nmmmim"
"{" = "@s\\}<ret>Nmmmim"
"[" = "@s\\]<ret>Nmmmim"
'"' = '@s\"<ret>Nmmmim'
"'" = "@s\\'<ret>Nmmmim"
"<" = "@s<gt><ret>Nmmmim"

[keys.normal.Z]
b = "page_up"
f = "page_down"
u = "page_cursor_half_up"
d = "page_cursor_half_down"

[keys.select]
# Allow selecting paragraphs finally.
"{" = ["extend_to_line_bounds", "goto_prev_paragraph"]
"}" = ["extend_to_line_bounds", "goto_next_paragraph"]

[keys.insert]
# Makes word deletes from other programs work here.
"C-backspace" = "delete_word_backward"
"C-del" = "delete_word_forward"


